{"version":3,"sources":["assets/images/carmageddon-max-damage.jpg","assets/fonts/starcraftnormal.woff","assets/fonts/starcraftnormal.woff2","styles/index.ts","styles/themeUtils.ts","components/game/game.styles.ts","components/typingPanel/typingPanel.styles.ts","components/typingPanel/typingPanel.component.tsx","components/cameraView/cameraView.styles.ts","components/cameraView/cameraView.component.tsx","components/game/game.component.tsx","api/agent.ts","components/hooks/useApiData.ts","components/game/game.container.tsx","serviceWorker.ts","styles/reset.ts","styles/fonts.js","styles/global.tsx","index.tsx"],"names":["module","exports","FlexCenter","themeUtils","color","white","black","font","small","base","medium","large","fontFamily","primary","secondary","breakpoints","desktop","transition","Wrapper","BackgroundImage","Container","Status","GameText","props","ok","InputArea","Input","TypingPanel","text","onType","onProgress","React","useState","charactersCommitted","inputText","state","setState","substr","startsWith","past","present","match","future","length","done","className","htmlFor","id","autoFocus","onChange","e","nextInputText","target","value","endsWith","nextCharactersCommitted","replace","disabled","Image","CameraView","src","alt","appReducer","action","type","startTime","payload","wpm","progress","Error","Game","useReducer","dispatch","current","total","Date","now","toFixed","requests","getData","Promise","res","setTimeout","ExampleData","dataFetchReducer","isLoading","isError","data","UseDataApi","useEffect","a","agent","result","fetchData","GameContainer","texts","Math","floor","random","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ResetCss","FontCss","css","StarcraftWoff2","StarcraftWoff","GlobalStyles","styles","ReactDOM","render","Fragment","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4821f16d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carmageddon-max-damage.5d75e7d1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starcraftnormal.a66e56cf.woff\";","module.exports = __webpack_public_path__ + \"static/media/starcraftnormal.c8bd7c63.woff2\";","import { css } from '@emotion/core'\n\nexport const FlexCenter = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const FullScreen = css`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 0;\n`\n\nexport const SelfCenter = css`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nexport const HorizontalCenter = css`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n`\n\nexport const FullFixed = css`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  width: 100%;\n  height: 100%;\n`\n","// app global style variables configuration\n// Took the color names from http://chir.ag/projects/name-that-color\n\nconst themeUtils = {\n  color: {\n    white: '#fff',\n    black: '#000'\n  },\n  font: {\n    small: '1.2rem',\n    base: '1.6rem',\n    medium: '2rem',\n    large: '3rem'\n  },\n  fontFamily: {\n    primary: '\"HelveticaNeue\", \"Helvetica\", \"Arial\", sans-serif',\n    secondary: '\"HelveticaNeue\", \"Helvetica\", \"Arial\", sans-serif'\n  },\n  // in ems\n  breakpoints: {\n    desktop: 90\n  },\n  transition: '400ms ease'\n} as const\n\nexport default themeUtils\n","import styled from '@emotion/styled'\nimport { FlexCenter } from '../../styles'\nimport themeUtils from '../../styles/themeUtils'\nimport BackgroundImage from '../../assets/images/carmageddon-max-damage.jpg'\n\nexport const Wrapper = styled('div')`\n  width: 100%;\n  height: 100%;\n  background: url('${BackgroundImage}') no-repeat;\n  background-size: cover;\n  ${FlexCenter};\n`\n\nexport const Container = styled('div')`\n  width: 960px;\n  height: 650px;\n  background-color: rgba(0, 0, 0, 0.6);\n  color: white;\n  position: relative;\n  ${FlexCenter};\n  flex-flow: column wrap;\n  justify-content: space-between;\n  padding: 30px;\n`\n\nexport const StyledButton = styled('button')`\n  display: block;\n  width: 200px;\n  height: 40px;\n  text-align: center;\n  color: white;\n  border-radius: 6px;\n  background-color: chocolate;\n  cursor: pointer;\n`\n\nexport const StyledInput = styled('input')`\n  height: 30px;\n  background-color: white;\n  color: black;\n  font-size: ${themeUtils.font.medium};\n`\n\nexport const Status = styled('div')`\n  font-size: ${themeUtils.font.medium};\n`\n","import styled from '@emotion/styled'\nimport themeUtils from '../../styles/themeUtils'\n\nexport const Container = styled('div')`\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  padding: 30px 15px;\n`\n\nexport const GameText = styled('div')<{ ok: boolean }>`\n  line-height: 1;\n  font-size: ${themeUtils.font.base};\n\n  & .past {\n    color: #888;\n  }\n\n  & .present {\n    color: ${props => (props.ok ? '#4a3' : '#f00')};\n    background: ${props => (props.ok ? 'transparent' : '#fcc')};\n    text-decoration: underline;\n  }\n\n  & .future {\n    color: #333;\n  }\n`\n\nexport const InputArea = styled('div')`\n  margin-top: 1em;\n\n  & label {\n    color: #888;\n    font-size: 1.8rem;\n  }\n`\n\nexport const Input = styled('input')<{ ok: boolean }>`\n  width: 100%;\n  box-sizing: border-box;\n  font: inherit;\n  font-size: 1.5em;\n  background: ${props => (props.ok ? 'white' : '#faa')};\n  color: ${props => (props.ok ? '#333' : '#f00')};\n  border: 1px solid #000;\n  padding: 5px;\n`\n","import React from 'react'\nimport { Container, GameText, Input, InputArea } from './typingPanel.styles'\n\ninterface Props {\n  text: string\n  onType: () => void\n  onProgress: (current: number, total: number) => void\n}\n\ninterface State {\n  charactersCommitted: number\n  inputText: string\n}\n\nfunction TypingPanel({ text, onType, onProgress }: Props): JSX.Element {\n  const [state, setState] = React.useState<State>({\n    charactersCommitted: 0,\n    inputText: ''\n  })\n\n  const onChange = (e): void => {\n    onType()\n\n    const nextInputText = e.target.value\n    if (\n      nextInputText === text.substr(state.charactersCommitted) ||\n      (nextInputText.endsWith(' ') && text.substr(state.charactersCommitted, nextInputText.length) === nextInputText)\n    ) {\n      const nextCharactersCommitted = state.charactersCommitted + nextInputText.length\n      setState({\n        inputText: '',\n        charactersCommitted: nextCharactersCommitted\n      })\n\n      onProgress(nextCharactersCommitted, text.length)\n    } else {\n      setState({ ...state, inputText: nextInputText.replace(/^\\s+/, '') })\n    }\n  }\n\n  const ok = text.substr(state.charactersCommitted).startsWith(state.inputText)\n  const past = text.substr(0, state.charactersCommitted)\n  const present = (text.substr(state.charactersCommitted).match(/^\\S+/) || [''])[0]\n  const future = text.substr(state.charactersCommitted + present.length)\n  const done = state.charactersCommitted === text.length\n  return (\n    <Container>\n      <GameText ok={ok}>\n        <span className=\"past\">{past}</span>\n        <span className=\"present\">{present}</span>\n        <span className=\"future\">{future}</span>\n      </GameText>\n      <InputArea>\n        <label htmlFor=\"text\">Type the text:</label>\n        <Input ok={ok} id=\"text\" autoFocus onChange={onChange} value={state.inputText} disabled={done} />\n      </InputArea>\n    </Container>\n  )\n}\n\nexport default TypingPanel\n","import styled from '@emotion/styled'\n\nexport const Wrapper = styled('div')`\n  width: 100%;\n  max-width: 400px;\n  margin: 30px auto;\n`\n\nexport const Image = styled('img')`\n  display: block;\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n`\n","import React from 'react'\nimport { Wrapper, Image } from './cameraView.styles'\n\nfunction CameraView(): JSX.Element {\n  return (\n    <Wrapper>\n      <Image src=\"https://hotwheelsracetracks.files.wordpress.com/2012/06/img_2870.jpg\" alt=\"race track\" />\n    </Wrapper>\n  )\n}\n\nexport default CameraView\n","import React from 'react'\nimport { Container, Wrapper, Status } from './game.styles'\nimport { TypingPanel } from '../typingPanel'\nimport { CameraView } from '../cameraView'\n\ninterface State {\n  startTime: number | null\n  wpm: number\n  progress: number\n}\n\nconst appReducer = (state, action): State => {\n  switch (action.type) {\n    case 'START_GAME':\n      return {\n        ...state,\n        startTime: action.payload\n      }\n    case 'MAKE_PROGRESS':\n      return {\n        ...state,\n        wpm: action.payload.wpm,\n        progress: action.payload.progress\n      }\n    default:\n      throw new Error('Wrong action provided to the appReducer')\n  }\n}\n\nfunction Game({ text }: { text: string }): JSX.Element {\n  const [state, dispatch] = React.useReducer(appReducer, {\n    startTime: null,\n    wpm: 0,\n    progress: 0\n  })\n\n  const onType = (): void => {\n    if (state.startTime == null) {\n      dispatch({ type: 'START_GAME', payload: Date.now() })\n    }\n  }\n\n  const onProgress = (current, total): void => {\n    dispatch({\n      type: 'MAKE_PROGRESS',\n      payload: {\n        progress: current / total,\n        wpm: current / 5 / ((Date.now() - (state.startTime || 0)) / 60000)\n      }\n    })\n  }\n\n  return (\n    <Wrapper>\n      <Container>\n        <TypingPanel text={text} onProgress={onProgress} onType={onType} />\n        <Status>\n          {`${(state.progress * 100).toFixed(0)}% completed ${state.wpm ? `, ${state.wpm.toFixed(0)} WPM` : ''}`}\n        </Status>\n        <CameraView />\n      </Container>\n    </Wrapper>\n  )\n}\n\nexport default Game\n","// import ExampleData from './words.json'\nimport ExampleData from './data.json'\n\nfunction getData(): Promise<any> {\n  return new Promise((res): ReturnType<typeof setTimeout> => setTimeout((): void => res(ExampleData), 1))\n}\n\nconst requests = {\n  getData\n}\n\nexport default {\n  requests\n}\n","import React from 'react'\nimport agent from '../../api/agent'\n\ninterface State {\n  isLoading: boolean\n  isError: boolean\n  data: any\n}\n\nconst dataFetchReducer = (state, action): State => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state, isLoading: true, isError: false }\n    case 'FETCH_SUCCESS':\n      return { ...state, isLoading: false, isError: false, data: action.payload }\n    case 'FETCH_FAILURE':\n      return { ...state, isLoading: false, isError: true }\n    default:\n      throw new Error('Wrong action provided to the dataFetchReducer')\n  }\n}\n\nfunction UseDataApi(): [State] {\n  const [state, dispatch] = React.useReducer(dataFetchReducer, {\n    isLoading: true,\n    isError: false,\n    data: []\n  })\n\n  React.useEffect(() => {\n    const fetchData = async (): Promise<void> => {\n      dispatch({ type: 'FETCH_INIT' })\n      try {\n        const result = await agent.requests.getData()\n        dispatch({ type: 'FETCH_SUCCESS', payload: result })\n      } catch (error) {\n        dispatch({ type: 'FETCH_FAILURE' })\n      }\n    }\n    fetchData()\n  }, [])\n\n  return [state]\n}\n\nexport default UseDataApi\n","import React from 'react'\nimport Game from './game.component'\nimport UseDataApi from '../hooks/useApiData'\n\nfunction getRandomText(texts: Text[]): string {\n  const rand = Math.floor(Math.random() * texts.length)\n  return texts[rand].text\n}\n\nfunction GameContainer(): JSX.Element {\n  const [{ data, isLoading, isError }] = UseDataApi()\n\n  return isLoading ? <div>LOADING...</div> : isError ? <div>Error</div> : <Game text={getRandomText(data)} />\n}\n\nexport default GameContainer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { css } from '@emotion/core'\n\nexport const ResetCss = css`\n  /* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n  html,\n  body,\n  div,\n  span,\n  applet,\n  object,\n  iframe,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  blockquote,\n  pre,\n  a,\n  abbr,\n  acronym,\n  address,\n  big,\n  cite,\n  code,\n  del,\n  dfn,\n  em,\n  img,\n  ins,\n  kbd,\n  q,\n  s,\n  samp,\n  small,\n  strike,\n  strong,\n  sub,\n  sup,\n  tt,\n  var,\n  b,\n  u,\n  i,\n  center,\n  dl,\n  dt,\n  dd,\n  ol,\n  ul,\n  li,\n  fieldset,\n  form,\n  label,\n  legend,\n  table,\n  caption,\n  tbody,\n  tfoot,\n  thead,\n  tr,\n  th,\n  td,\n  article,\n  aside,\n  canvas,\n  details,\n  embed,\n  figure,\n  figcaption,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  output,\n  ruby,\n  section,\n  summary,\n  time,\n  mark,\n  audio,\n  video {\n    margin: 0;\n    margin-block-start: 0;\n    margin-block-end: 0;\n    margin-inline-start: 0;\n    margin-inline-end: 0;\n    padding-inline-start: 0;\n    padding: 0;\n    border: 0;\n    font: inherit;\n    font-size: 100%;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article,\n  aside,\n  details,\n  figcaption,\n  figure,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  section {\n    display: block;\n  }\n\n  body {\n    line-height: 1;\n  }\n\n  ol,\n  ul {\n    list-style: none;\n  }\n\n  blockquote,\n  q {\n    quotes: none;\n  }\n\n  blockquote::before,\n  blockquote::after,\n  q::before,\n  q::after {\n    content: '';\n  }\n\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n`\n","import { css } from '@emotion/core'\nimport StarcraftWoff from '../assets/fonts/starcraftnormal.woff'\nimport StarcraftWoff2 from '../assets/fonts/starcraftnormal.woff2'\n\nexport const FontCss = css`\n  @font-face {\n    font-family: 'Starcraft';\n    src: url(${StarcraftWoff2}) format('woff2'), url(${StarcraftWoff}) format('woff');\n    font-weight: 400;\n    font-style: normal;\n    font-display: swap;\n  }\n`\n","import React, { ReactElement } from 'react'\nimport { Global, css } from '@emotion/core'\nimport { ResetCss } from './reset'\nimport { FontCss } from './fonts'\nimport themeUtils from './themeUtils'\n\nfunction GlobalStyles(): ReactElement {\n  return (\n    <Global\n      styles={css`\n        ${ResetCss};\n        ${FontCss};\n\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n\n        html {\n          font-size: 62.5%;\n          height: 100%;\n          /* scroll-behavior: smooth; */\n        }\n\n        body {\n          font-family: ${themeUtils.fontFamily.primary};\n          font-weight: 400;\n          width: 100%;\n          height: 100%;\n          color: ${themeUtils.color.white};\n          -webkit-touch-callout: none;\n        }\n\n        .root {\n          width: 100%;\n          height: 100%;\n          position: relative;\n        }\n\n        strong {\n          font-weight: bold;\n        }\n\n        a {\n          color: inherit;\n          text-decoration: none;\n        }\n\n        button,\n        input,\n        a {\n          border: 0;\n          background: none;\n\n          &:focus {\n            outline: none;\n          }\n        }\n      `}\n    />\n  )\n}\n\nexport default GlobalStyles\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Game } from './components/game'\nimport * as serviceWorker from './serviceWorker'\nimport GlobalStyles from './styles/global'\n\nReactDOM.render(\n  <React.Fragment>\n    <GlobalStyles />\n    <Game />\n  </React.Fragment>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}