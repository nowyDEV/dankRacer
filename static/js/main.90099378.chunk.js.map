{"version":3,"sources":["assets/images/carmageddon-max-damage.jpg","assets/fonts/starcraftnormal.woff","assets/fonts/starcraftnormal.woff2","styles/index.ts","styles/themeUtils.ts","components/game/game.styles.ts","components/typingPanel/typingPanel.styles.ts","components/typingPanel/typingPanel.component.tsx","components/cameraView/cameraView.styles.ts","components/cameraView/cameraView.component.tsx","components/gameText/gameText.styles.ts","components/gameText/config.ts","components/gameText/gameText.component.tsx","components/gameText/gameText.helpers.ts","api/agent.ts","components/gameText/gameText.container.tsx","components/game/game.component.tsx","components/hooks/useApiData.ts","components/game/game.container.tsx","serviceWorker.ts","styles/reset.ts","styles/fonts.js","styles/global.tsx","index.tsx"],"names":["module","exports","FlexCenter","themeUtils","color","white","black","font","small","base","medium","large","fontFamily","primary","secondary","breakpoints","desktop","transition","Wrapper","BackgroundImage","Container","Status","GameText","props","green","InputArea","Input","error","TypingPanel","text","onType","onProgress","React","useState","charactersCommitted","inputText","state","setState","isCorrect","substr","startsWith","past","present","match","future","length","done","className","htmlFor","id","autoFocus","onChange","e","nextInputText","target","value","endsWith","nextCharactersCommitted","replace","disabled","Image","CameraView","src","alt","NON_TYPEABLES","isNonTypable","el","classes","HTMLElement","some","classList","contains","hasClass","exercise","gameCode","useRef","code","htmlData","setHtmlData","useEffect","codemap","current","contents","hasChildNodes","childNodes","forEach","elIndex","prev","next","prevText","textContent","nextText","charAt","push","char","beforeComment","index","search","split","charIndex","iterativeFilter","collection","loopFn","indices","addSection","lastIdx","curIdx","start","howMany","i","piece","call","filter","leadingSearch","trailingSearch","lastNewline","lastTypeable","setMode","mode","this","firstTypeableFound","newlineFound","typeableFound","lastRelevantNewline","setFound","found","groupedCodemap","_","groupBy","each","codeGroup","elem","elemText","collapseCodeGroup","chunks","idx","slice","join","nodeType","oldClass","attr","newContent","querySelector","outerHTML","add","querySelectorAll","bindCodeCharacters","ref","dangerouslySetInnerHTML","__html","requests","getData","Promise","res","setTimeout","ExampleData","getGameData","GameData","GameTextContainer","isLoading","setIsLoading","data","setData","a","agent","games","console","log","message","fetchData","appReducer","action","type","startTime","payload","wpm","progress","Error","Game","useReducer","dispatch","total","Date","now","toFixed","dataFetchReducer","isError","UseDataApi","result","GameContainer","texts","Math","floor","random","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ResetCss","FontCss","css","StarcraftWoff2","StarcraftWoff","GlobalStyles","styles","ReactDOM","render","Fragment","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.90099378.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carmageddon-max-damage.5d75e7d1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starcraftnormal.a66e56cf.woff\";","module.exports = __webpack_public_path__ + \"static/media/starcraftnormal.c8bd7c63.woff2\";","import { css } from '@emotion/core'\n\nexport const FlexCenter = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const FullScreen = css`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 0;\n`\n\nexport const SelfCenter = css`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nexport const HorizontalCenter = css`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n`\n\nexport const FullFixed = css`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  width: 100%;\n  height: 100%;\n`\n","// app global style variables configuration\n// Took the color names from http://chir.ag/projects/name-that-color\n\nconst themeUtils = {\n  color: {\n    white: '#fff',\n    black: '#000'\n  },\n  font: {\n    small: '1.2rem',\n    base: '1.6rem',\n    medium: '2rem',\n    large: '3rem'\n  },\n  fontFamily: {\n    primary: '\"HelveticaNeue\", \"Helvetica\", \"Arial\", sans-serif',\n    secondary: '\"HelveticaNeue\", \"Helvetica\", \"Arial\", sans-serif'\n  },\n  // in ems\n  breakpoints: {\n    desktop: 90\n  },\n  transition: '400ms ease'\n} as const\n\nexport default themeUtils\n","import styled from '@emotion/styled'\nimport { FlexCenter } from '../../styles'\nimport themeUtils from '../../styles/themeUtils'\nimport BackgroundImage from '../../assets/images/carmageddon-max-damage.jpg'\n\nexport const Wrapper = styled('div')`\n  width: 100%;\n  height: 100%;\n  background: url('${BackgroundImage}') no-repeat;\n  background-size: cover;\n  ${FlexCenter};\n`\n\nexport const Container = styled('div')`\n  width: 960px;\n  height: 650px;\n  background-color: rgba(0, 0, 0, 0.6);\n  color: white;\n  position: relative;\n  ${FlexCenter};\n  flex-flow: column wrap;\n  justify-content: space-between;\n  padding: 30px;\n`\n\nexport const StyledButton = styled('button')`\n  display: block;\n  width: 200px;\n  height: 40px;\n  text-align: center;\n  color: white;\n  border-radius: 6px;\n  background-color: chocolate;\n  cursor: pointer;\n`\n\nexport const StyledInput = styled('input')`\n  height: 30px;\n  background-color: white;\n  color: black;\n  font-size: ${themeUtils.font.medium};\n`\n\nexport const Status = styled('div')`\n  font-size: ${themeUtils.font.medium};\n`\n","import styled from '@emotion/styled'\nimport themeUtils from '../../styles/themeUtils'\n\nexport const Container = styled('div')`\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  padding: 30px 15px;\n`\n\nexport const GameText = styled('div')<{ green: boolean }>`\n  line-height: 1;\n  font-size: ${themeUtils.font.base};\n\n  & .past {\n    color: #888;\n  }\n\n  & .present {\n    color: ${props => (props.green ? '#4a3' : '#f00')};\n    background: ${props => (props.green ? 'transparent' : '#fcc')};\n    text-decoration: underline;\n  }\n\n  & .future {\n    color: #333;\n  }\n`\n\nexport const InputArea = styled('div')`\n  margin-top: 1em;\n\n  & label {\n    color: #888;\n    font-size: 1.8rem;\n  }\n`\n\nexport const Input = styled('input')<{ error: boolean }>`\n  width: 100%;\n  box-sizing: border-box;\n  font: inherit;\n  font-size: 1.5em;\n  background: ${props => (props.error ? '#faa' : 'white')};\n  color: ${props => (props.error ? '#f00' : '#333')};\n  border: 1px solid #000;\n  padding: 5px;\n`\n","import React from 'react'\nimport { Container, GameText, Input, InputArea } from './typingPanel.styles'\n\ninterface Props {\n  text: string\n  onType: () => void\n  onProgress: (current: number, total: number) => void\n}\n\ninterface State {\n  charactersCommitted: number\n  inputText: string\n}\n\nfunction TypingPanel({ text, onType, onProgress }: Props): JSX.Element {\n  const [state, setState] = React.useState<State>({\n    charactersCommitted: 0,\n    inputText: ''\n  })\n\n  const onChange = (e): void => {\n    onType()\n\n    const nextInputText = e.target.value\n    if (\n      nextInputText === text.substr(state.charactersCommitted) ||\n      (nextInputText.endsWith(' ') && text.substr(state.charactersCommitted, nextInputText.length) === nextInputText)\n    ) {\n      const nextCharactersCommitted = state.charactersCommitted + nextInputText.length\n      setState({\n        inputText: '',\n        charactersCommitted: nextCharactersCommitted\n      })\n\n      onProgress(nextCharactersCommitted, text.length)\n    } else {\n      setState({ ...state, inputText: nextInputText.replace(/^\\s+/, '') })\n    }\n  }\n\n  const isCorrect = text.substr(state.charactersCommitted).startsWith(state.inputText)\n  const past = text.substr(0, state.charactersCommitted)\n  const present = (text.substr(state.charactersCommitted).match(/^\\S+/) || [''])[0]\n  const future = text.substr(state.charactersCommitted + present.length)\n  const done = state.charactersCommitted === text.length\n  return (\n    <Container>\n      <GameText green={isCorrect}>\n        <span className=\"past\">{past}</span>\n        <span className=\"present\">{present}</span>\n        <span className=\"future\">{future}</span>\n      </GameText>\n      <InputArea>\n        <label htmlFor=\"text\">Type the text:</label>\n        <Input error={!isCorrect} id=\"text\" autoFocus onChange={onChange} value={state.inputText} disabled={done} />\n      </InputArea>\n    </Container>\n  )\n}\n\nexport default TypingPanel\n","import styled from '@emotion/styled'\n\nexport const Wrapper = styled('div')`\n  width: 100%;\n  max-width: 400px;\n  margin: 30px auto;\n`\n\nexport const Image = styled('img')`\n  display: block;\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n`\n","import React from 'react'\nimport { Wrapper, Image } from './cameraView.styles'\n\nfunction CameraView(): JSX.Element {\n  return (\n    <Wrapper>\n      <Image src=\"https://hotwheelsracetracks.files.wordpress.com/2012/06/img_2870.jpg\" alt=\"race track\" />\n    </Wrapper>\n  )\n}\n\nexport default CameraView\n","import styled from '@emotion/styled'\nimport themeUtils from '../../styles/themeUtils'\n\nexport const Wrapper = styled('pre')`\n  display: block;\n  padding: 10px;\n  margin: 0 0 10px;\n  line-height: 1.4286;\n  color: #7b8a8b;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #ecf0f1;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`\n\nexport const Container = styled('code')`\n  font-family: 'Source Code Pro', monospace;\n  font-size: ${themeUtils.font.small};\n  display: block;\n  padding: 0.5em;\n  color: #333;\n  background: #f8f8ff;\n  white-space: pre-wrap;\n  border-radius: 4px;\n`\n","export const alphaKeys = [\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z'\n]\n\nexport const numericKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n\nexport const specialKeys = [\n  '`',\n  '~',\n  '!',\n  '@',\n  '#',\n  '$',\n  '%',\n  '^',\n  '&',\n  '*',\n  '(',\n  ')',\n  '-',\n  '_',\n  '=',\n  '+',\n  '[',\n  '{',\n  ']',\n  '}',\n  '\\\\',\n  '|',\n  \"'\",\n  '\"',\n  ';',\n  ':',\n  '/',\n  '?',\n  '.',\n  '>',\n  ',',\n  '<'\n]\n\nexport const actionKeys = ['enter', 'space', 'shift+space', 'shift+enter']\n\nexport const NON_TYPEABLES = ['comment', 'template_comment', 'diff', 'javadoc', 'phpdoc']\n","import React from 'react'\nimport _ from 'lodash'\nimport { Wrapper, Container } from './gameText.styles'\nimport { NON_TYPEABLES } from './config'\nimport { hasClass, isTextNode } from './gameText.helpers'\n\ninterface Code {\n  char: string\n  beforeComment: boolean\n  index: number\n  elIndex: number\n  el: HTMLElement\n}\n\nfunction isNonTypable(el: HTMLElement): boolean {\n  return hasClass(el, NON_TYPEABLES)\n}\n\nfunction GameText({ exercise }: { exercise: Exercise }): JSX.Element {\n  const gameCode = React.useRef<HTMLSpanElement | null>(null)\n  const [htmlData, setHtmlData] = React.useState(exercise.code)\n\n  /**\n   * Extract game code, manipulate references, remove non-typeables,\n   * and wrap each character in a specific span tag\n   */\n  const bindCodeCharacters = (): void => {\n    let codemap: Code[] = []\n\n    if (!(gameCode.current instanceof HTMLElement)) {\n      return\n    }\n    const contents = gameCode.current.hasChildNodes() ? gameCode.current.childNodes : []\n\n    // Loop through contents of code, and add all non-comment\n    // blocks into the codemap, keeping track of their positions\n    // and elements\n    contents.forEach((el, elIndex) => {\n      if (isNonTypable(el)) {\n        // Handle special case of end-of-line comment\n        const prev = contents[elIndex - 1]\n        const next = contents[elIndex + 1]\n\n        if (prev instanceof HTMLElement && next instanceof HTMLElement) {\n          // End-of-line comment is preceded by non-newline and\n          // followed by newline\n          const prevText = prev.textContent || ''\n          const nextText = next.textContent || ''\n          const isEndOfLineComment = !prevText.match(/\\n\\s*$/) && nextText.charAt(0) === '\\n'\n          if (isEndOfLineComment) {\n            // Add the return at the end of the previous\n            // element\n            codemap.push({\n              char: '\\n',\n              beforeComment: true,\n              index: prevText.search(/\\s*$/),\n              elIndex: elIndex - 1,\n              el: prev\n            })\n          }\n        }\n        return\n      }\n\n      const text = el.textContent || ''\n      text.split('').forEach((char, charIndex) => {\n        codemap.push({\n          char,\n          beforeComment: false,\n          index: charIndex,\n          elIndex,\n          el\n        })\n      })\n    })\n\n    /**\n     * Reusable filter method that keeps track of indices\n     * marked for removal, with custom criteria functions\n     */\n    const iterativeFilter = (collection, state, loopFn): Code[] => {\n      const indices = {}\n      const addSection = (lastIdx: number, curIdx: number): void => {\n        const start = lastIdx + 1\n        const howMany = curIdx - start\n\n        if (howMany > 0) {\n          for (let i = start; i < start + howMany; i++) {\n            indices[i] = true\n          }\n        }\n      }\n\n      collection.forEach((piece, index) => {\n        loopFn.call(state, piece, index, addSection)\n      })\n\n      // Remove the collected indices\n      return collection.filter((piece, index) => {\n        return !indices[index]\n      })\n    }\n\n    // Loop through the codemap and remove occurrences of leading and\n    // trailing whitespace\n    codemap = iterativeFilter(\n      codemap,\n      {\n        leadingSearch: true,\n        trailingSearch: false,\n        lastNewline: -1,\n        lastTypeable: -1,\n        setMode(mode): void {\n          this.leadingSearch = mode === 'leading'\n          this.trailingSearch = mode === 'trailing'\n        }\n      },\n      function check(piece, i, addSection) {\n        if (piece.char === ' ' || piece.char === '\\t') {\n          // Skip over\n          return\n        }\n        if (piece.char === '\\n') {\n          // New line\n          if (this.trailingSearch) {\n            this.setMode('leading')\n            addSection(this.lastTypeable, i)\n          }\n          this.lastNewline = i\n        } else {\n          // Typeable\n          if (this.leadingSearch) {\n            this.setMode('trailing')\n            addSection(this.lastNewline, i)\n          }\n          this.lastTypeable = i\n        }\n      }\n    )\n\n    // Finally, remove contiguous blocks of newline+whitespace,\n    // as well as globally leading whitespace\n    codemap = iterativeFilter(\n      codemap,\n      {\n        firstTypeableFound: false,\n        newlineFound: false,\n        typeableFound: false,\n        lastRelevantNewline: -1,\n        setFound(found): void {\n          this.newlineFound = found === 'newline'\n          this.typeableFound = found === 'typeable'\n          if (found === 'typeable') {\n            this.firstTypeableFound = true\n          }\n        }\n      },\n      function check(piece, i, addSection) {\n        if (piece.char === ' ' || piece.char === '\\t') {\n          // Skip over\n          return\n        }\n        if (piece.char === '\\n') {\n          // Newline\n          if (this.firstTypeableFound && !this.newlineFound) {\n            this.lastRelevantNewline = i\n          }\n          this.setFound('newline')\n        } else {\n          // Typeable\n          if (this.newlineFound) {\n            addSection(this.lastRelevantNewline, i)\n          }\n          this.setFound('typeable')\n        }\n      }\n    )\n\n    // Group remaining code chars by original element, and loop through\n    // every element group and replace the element's text content with the\n    // wrapped code chars\n    // eslint-disable-next-line\n    const groupedCodemap = _.groupBy(codemap, function(piece) {\n      return piece.elIndex\n    })\n\n    // @ts-ignore\n    _.each(groupedCodemap, codeGroup => {\n      const elem = codeGroup[0].el\n      const elemText = elem.textContent || ''\n\n      const collapseCodeGroup = (code, text): string => {\n        const chunks: string[] = []\n        let idx = 0\n\n        code.forEach(piece => {\n          chunks.push(text.slice(idx, piece.index))\n          idx = piece.index + 1\n\n          if (piece.char === '\\n') {\n            chunks.push(`<span class=\"code-char return-char\"></span>`)\n            if (!piece.beforeComment) {\n              chunks.push('\\n')\n            }\n          } else {\n            chunks.push(`<span class=\"code-char\">${piece.char}</span>`)\n          }\n        })\n\n        chunks.push(text.slice(idx, text.length))\n        return chunks.join('')\n      }\n\n      if (isTextNode(elem)) {\n        setHtmlData(collapseCodeGroup(codeGroup, elemText))\n      } else {\n        // Re-add highlighting classes to the new spans\n        const oldClass = elem.attr('class')\n        const newContent = gameCode.current!.querySelector(collapseCodeGroup(codeGroup, elemText))\n        elem.outerHTML = newContent\n        newContent instanceof HTMLElement && newContent.classList.add(oldClass)\n      }\n    })\n\n    // Set all code characters to untyped\n    gameCode.current.querySelectorAll('.code-char').forEach(el => {\n      el.classList.add('untyped')\n    })\n  }\n\n  React.useEffect(() => {\n    bindCodeCharacters()\n  }, [])\n  return (\n    <Wrapper>\n      <Container>\n        <span ref={gameCode} id=\"gamecode\" dangerouslySetInnerHTML={{ __html: htmlData }} />\n      </Container>\n    </Wrapper>\n  )\n}\n\nexport default GameText\n","import { actionKeys, alphaKeys, numericKeys, specialKeys } from './config'\n\nexport function getKeyEvents(): string[] {\n  // Bind key events\n  const allAlphaKeys = [...alphaKeys, ...alphaKeys.map(key => key.toUpperCase())]\n\n  return [...allAlphaKeys, ...numericKeys, ...specialKeys, ...actionKeys]\n}\n\nexport function hasClass(el: HTMLElement, classes: string[]): boolean {\n  if (el instanceof HTMLElement) {\n    return classes.some(className => el.classList.contains(className))\n  }\n  return false\n}\n\nexport function isTextNode(el: HTMLElement): boolean {\n  return el.nodeType === 3\n}\n","// import ExampleData from './words.json'\nimport ExampleData from './data.json'\nimport GameData from './code_response.json'\n\nfunction getData(): Promise<any> {\n  return new Promise((res): ReturnType<typeof setTimeout> => setTimeout((): void => res(ExampleData), 1))\n}\n\nfunction getGameData(): Promise<any> {\n  return new Promise((res): ReturnType<typeof setTimeout> => setTimeout((): void => res(GameData), 1))\n}\n\nconst requests = {\n  getData,\n  getGameData\n}\n\nexport default {\n  requests\n}\n","import React from 'react'\nimport GameText from './gameText.component'\nimport agent from '../../api/agent'\n\nfunction GameTextContainer(): JSX.Element {\n  const [isLoading, setIsLoading] = React.useState(true)\n  const [data, setData] = React.useState<null | GameInstance>(null)\n\n  React.useEffect((): void => {\n    const fetchData = async (): Promise<void> => {\n      setIsLoading(true)\n      try {\n        const games = await agent.requests.getGameData()\n        setData(games[1])\n      } catch (err) {\n        console.log(err.message)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchData()\n  }, [])\n\n  return isLoading ? <span>Loading...</span> : <GameText exercise={data!.exercise} />\n}\n\nexport default GameTextContainer\n","import React from 'react'\nimport { Container, Wrapper, Status } from './game.styles'\nimport { TypingPanel } from '../typingPanel'\nimport { CameraView } from '../cameraView'\nimport { GameText } from '../gameText'\n\ninterface State {\n  startTime: number | null\n  wpm: number\n  progress: number\n}\n\nconst appReducer = (state, action): State => {\n  switch (action.type) {\n    case 'START_GAME':\n      return {\n        ...state,\n        startTime: action.payload\n      }\n    case 'MAKE_PROGRESS':\n      return {\n        ...state,\n        wpm: action.payload.wpm,\n        progress: action.payload.progress\n      }\n    default:\n      throw new Error('Wrong action provided to the appReducer')\n  }\n}\n\nfunction Game({ text }: { text: string }): JSX.Element {\n  const [state, dispatch] = React.useReducer(appReducer, {\n    startTime: null,\n    wpm: 0,\n    progress: 0\n  })\n\n  const onType = (): void => {\n    if (state.startTime == null) {\n      dispatch({ type: 'START_GAME', payload: Date.now() })\n    }\n  }\n\n  const onProgress = (current, total): void => {\n    dispatch({\n      type: 'MAKE_PROGRESS',\n      payload: {\n        progress: current / total,\n        wpm: current / 5 / ((Date.now() - (state.startTime || 0)) / 60000)\n      }\n    })\n  }\n\n  return (\n    <Wrapper>\n      <Container>\n        <GameText />\n        <TypingPanel text={text} onProgress={onProgress} onType={onType} />\n        <Status>\n          {`${(state.progress * 100).toFixed(0)}% completed ${state.wpm ? `, ${state.wpm.toFixed(0)} WPM` : ''}`}\n        </Status>\n        <CameraView />\n      </Container>\n    </Wrapper>\n  )\n}\n\nexport default Game\n","import React from 'react'\nimport agent from '../../api/agent'\n\ninterface State {\n  isLoading: boolean\n  isError: boolean\n  data: any\n}\n\nconst dataFetchReducer = (state, action): State => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state, isLoading: true, isError: false }\n    case 'FETCH_SUCCESS':\n      return { ...state, isLoading: false, isError: false, data: action.payload }\n    case 'FETCH_FAILURE':\n      return { ...state, isLoading: false, isError: true }\n    default:\n      throw new Error('Wrong action provided to the dataFetchReducer')\n  }\n}\n\nfunction UseDataApi(): [State] {\n  const [state, dispatch] = React.useReducer(dataFetchReducer, {\n    isLoading: true,\n    isError: false,\n    data: []\n  })\n\n  React.useEffect(() => {\n    const fetchData = async (): Promise<void> => {\n      dispatch({ type: 'FETCH_INIT' })\n      try {\n        const result = await agent.requests.getData()\n        dispatch({ type: 'FETCH_SUCCESS', payload: result })\n      } catch (error) {\n        dispatch({ type: 'FETCH_FAILURE' })\n      }\n    }\n    fetchData()\n  }, [])\n\n  return [state]\n}\n\nexport default UseDataApi\n","import React from 'react'\nimport Game from './game.component'\nimport UseDataApi from '../hooks/useApiData'\n\nfunction getRandomText(texts: Text[]): string {\n  const rand = Math.floor(Math.random() * texts.length)\n  return texts[rand].text\n}\n\nfunction GameContainer(): JSX.Element {\n  const [{ data, isLoading, isError }] = UseDataApi()\n\n  return isLoading ? <div>LOADING...</div> : isError ? <div>Error</div> : <Game text={getRandomText(data)} />\n}\n\nexport default GameContainer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { css } from '@emotion/core'\n\nexport const ResetCss = css`\n  /* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n  html,\n  body,\n  div,\n  span,\n  applet,\n  object,\n  iframe,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  blockquote,\n  pre,\n  a,\n  abbr,\n  acronym,\n  address,\n  big,\n  cite,\n  code,\n  del,\n  dfn,\n  em,\n  img,\n  ins,\n  kbd,\n  q,\n  s,\n  samp,\n  small,\n  strike,\n  strong,\n  sub,\n  sup,\n  tt,\n  var,\n  b,\n  u,\n  i,\n  center,\n  dl,\n  dt,\n  dd,\n  ol,\n  ul,\n  li,\n  fieldset,\n  form,\n  label,\n  legend,\n  table,\n  caption,\n  tbody,\n  tfoot,\n  thead,\n  tr,\n  th,\n  td,\n  article,\n  aside,\n  canvas,\n  details,\n  embed,\n  figure,\n  figcaption,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  output,\n  ruby,\n  section,\n  summary,\n  time,\n  mark,\n  audio,\n  video {\n    margin: 0;\n    margin-block-start: 0;\n    margin-block-end: 0;\n    margin-inline-start: 0;\n    margin-inline-end: 0;\n    padding-inline-start: 0;\n    padding: 0;\n    border: 0;\n    font: inherit;\n    font-size: 100%;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article,\n  aside,\n  details,\n  figcaption,\n  figure,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  section {\n    display: block;\n  }\n\n  body {\n    line-height: 1;\n  }\n\n  ol,\n  ul {\n    list-style: none;\n  }\n\n  blockquote,\n  q {\n    quotes: none;\n  }\n\n  blockquote::before,\n  blockquote::after,\n  q::before,\n  q::after {\n    content: '';\n  }\n\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n`\n","import { css } from '@emotion/core'\nimport StarcraftWoff from '../assets/fonts/starcraftnormal.woff'\nimport StarcraftWoff2 from '../assets/fonts/starcraftnormal.woff2'\n\nexport const FontCss = css`\n  @font-face {\n    font-family: 'Starcraft';\n    src: url(${StarcraftWoff2}) format('woff2'), url(${StarcraftWoff}) format('woff');\n    font-weight: 400;\n    font-style: normal;\n    font-display: swap;\n  }\n`\n","import React, { ReactElement } from 'react'\nimport { Global, css } from '@emotion/core'\nimport { ResetCss } from './reset'\nimport { FontCss } from './fonts'\nimport themeUtils from './themeUtils'\n\nfunction GlobalStyles(): ReactElement {\n  return (\n    <Global\n      styles={css`\n        ${ResetCss};\n        ${FontCss};\n\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n\n        html {\n          font-size: 62.5%;\n          height: 100%;\n          /* scroll-behavior: smooth; */\n        }\n\n        body {\n          font-family: ${themeUtils.fontFamily.primary};\n          font-weight: 400;\n          width: 100%;\n          height: 100%;\n          color: ${themeUtils.color.white};\n          -webkit-touch-callout: none;\n        }\n\n        .root {\n          width: 100%;\n          height: 100%;\n          position: relative;\n        }\n\n        strong {\n          font-weight: bold;\n        }\n\n        a {\n          color: inherit;\n          text-decoration: none;\n        }\n\n        button,\n        input,\n        a {\n          border: 0;\n          background: none;\n\n          &:focus {\n            outline: none;\n          }\n        }\n      `}\n    />\n  )\n}\n\nexport default GlobalStyles\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Game } from './components/game'\nimport * as serviceWorker from './serviceWorker'\nimport GlobalStyles from './styles/global'\n\nReactDOM.render(\n  <React.Fragment>\n    <GlobalStyles />\n    <Game />\n  </React.Fragment>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}